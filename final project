#include<windows.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <GL/glut.h>

#define drand48() ((float)rand()/RAND_MAX)

#define PS_GRAVITY -9.8
#define PS_WATERFALL  0
#define PS_FOUNTAIN   1

typedef struct {
    float x, y, z;
    float radius;
} PSsphere;

typedef struct {
    float position[3];			/* current position */
    float previous[3];			/* previous position */
    float velocity[3];			/* velocity (magnitude & direction) */
    float dampening;			/* % of energy lost on collision */
    int alive;				/* is this particle alive? */
} PSparticle;

PSparticle* particles = NULL;
#define NUM_SPHERES 4
PSsphere spheres[NUM_SPHERES] = {	/* position of spheres */
    { -0.1, 0.6, 0, 0.4 },
    { -0.7, 1.4, 0, 0.25 },

    { 0.1, 1.5, 0.1, 0.3 },
};
int num_particles = 10000;
int type = PS_WATERFALL;
int points = 1;
int draw_spheres = 1;

float flow = 500;
float slow_down = 1;

float spin_x = 0;
float spin_y = 0;
int point_size = 4;

#if defined(_WIN32)
#include <sys/timeb.h>
#else

#include <sys/types.h>

#endif


float timedelta(void)
{
    static long begin = 0;
    static long finish, difference;

#if defined(_WIN32)
    static struct timeb tb;
    ftime(&tb);
    finish = tb.time*1000+tb.millitm;  //returns milliseconds untill it reaches max value
#endif

    difference = finish - begin;
    begin = finish;

    return (float)difference/(float)1000;
}
void psTimeStep(PSparticle* p, float dt)
{
    if (p->alive == 0)
	return;

    p->velocity[0] += 0;
    p->velocity[1] += PS_GRAVITY*dt;
    p->velocity[2] += 0;

    p->previous[0] = p->position[0];
    p->previous[1] = p->position[1];
    p->previous[2] = p->position[2];

    p->position[0] += p->velocity[0]*dt;
    p->position[1] += p->velocity[1]*dt;
    p->position[2] += p->velocity[2]*dt;
}

void psNewParticle(PSparticle* p, float dt)
{
    if (type == PS_WATERFALL) {
	p->velocity[0] = -1*(drand48());  //placing fall of particles towards -x axis
	//p->velocity[1] = -0.1;
	p->velocity[2] = 0.5*(drand48());
	p->position[0] = 0;  //fall of particles at (0,0)
	p->position[1] = 2;   //fall of particles in 2 dist towards top
	p->position[2] = 0;    //from left (0,0) fall of particles
	/*p->previous[0] = p->position[0];
	p->previous[1] = p->position[1];
	p->previous[2] = p->position[2];*/
	p->dampening = 0.45*drand48();   //after drand48 reexecutng the func
	p->alive = 1;
    } else if (type == PS_FOUNTAIN) {
	p->velocity[0] = 2*(drand48()-0.5);  //uniform
	p->velocity[1] = 5;   //how long to spray
	p->velocity[2] = 2*(drand48()-0.5);
	p->position[0] = -0.1;
	p->position[1] = 0.9; //upwards spray
	p->position[2] = 0;
	/*p->previous[0] = p->position[0];
	p->previous[1] = p->position[1];
	p->previous[2] = p->position[2];*/
	p->dampening = 0.35*drand48(); //to redraw decrease
	p->alive = 1;
    }

    psTimeStep(p, 2*dt*drand48());
}


void psCollideSphere(PSparticle* p, PSsphere* s)
{
    float vx = p->position[0] - s->x;
    float vy = p->position[1] - s->y;
    float vz = p->position[2] - s->z;
    float distance;

    if (p->alive == 0)
	return;

    distance = sqrt(vx*vx + vy*vy + vz*vz);

    if (distance < s->radius) {
#if 0
	vx /= distance;  vy /= distance;  vz /= distance;
	d = 2*(-vx*p->velocity[0] + -vy*p->velocity[1] + -vz*p->velocity[2]);
	p->velocity[0] += vx*d*2;
	p->velocity[1] += vy*d*2;
	p->velocity[2] += vz*d*2;
	d = sqrt(p->velocity[0]*p->velocity[0] +
		 p->velocity[1]*p->velocity[1] +
		 p->velocity[2]*p->velocity[2]);
	p->velocity[0] /= d;
	p->velocity[1] /= d;
	p->velocity[2] /= d;
#else
	p->position[0] = s->x+(vx/distance)*s->radius;
	p->position[1] = s->y+(vy/distance)*s->radius;
	p->position[2] = s->z+(vz/distance)*s->radius;
	p->previous[0] = p->position[0];
	p->previous[1] = p->position[1];
	p->previous[2] = p->position[2];
	p->velocity[0] = vx/distance;
	p->velocity[1] = vy/distance;
	p->velocity[2] = vz/distance;
#endif
    }
}

void reshape(int width, int height)
{
    float black[] = { 0, 0, 0, 0 };
    glViewport(0,0, width, height);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(60, (float)width/height, 0.1, 1000);  //aspect ratio , near or far to camera
    glMatrixMode(GL_MODELVIEW);   //applyto modelview matrix
    glLoadIdentity();
    gluLookAt(0, 1, 3, 0, 1, 0, 0, 1, 0);
   /* glFogfv(GL_FOG_COLOR, black);
    glFogf(GL_FOG_START, 2.5);
    glFogf(GL_FOG_END, 4);
    glEnable(GL_FOG);
    glFogi(GL_FOG_MODE, GL_LINEAR); */
    glPointSize(point_size);
    glEnable(GL_POINT_SMOOTH);
    glEnable(GL_BLEND);
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);  //to create black background around the object
    glEnable(GL_COLOR_MATERIAL);  //overwritting material properties with color matrix
    glEnable(GL_DEPTH_TEST);   //clearence view
    glEnable(GL_LIGHT0);  //it is true hence lightning applied
    timedelta();
}

void display(void)
{
    static int i;
    static float c;
    static int j = 0;
    static char s[32];

    glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);
    glPushMatrix();

    glRotatef(spin_y, 1, 0, 0);    //rotate about x and y axis
    glRotatef(spin_x, 0, 1, 0);

    glEnable(GL_LIGHTING);
    if (draw_spheres) {           //=====1
	for (i = 0; i < draw_spheres; i++) {
	    glPushMatrix();
	    glTranslatef(spheres[i].x, spheres[i].y, spheres[i].z);
	    glColor3ub(255,223,0);                  //color for sphere
	    glutSolidSphere(spheres[i].radius, 16, 16);
	    glPopMatrix();
	}
    }
    glDisable(GL_LIGHTING);

    glBegin(GL_QUADS);
    glColor3ub(0, 128, 255);   //disk color
    glVertex3f(-2, 0, -2);     //placing disk
    glVertex3f(-2, 0, 2);
    glVertex3f(2, 0, 2);
    glVertex3f(2, 0, -2);
    glEnd();

    if (points) {
	glBegin(GL_POINTS);

	for (i = 0; i < num_particles; i++) {
	    if (particles[i].alive == 0)
		continue;

	    glColor3ub(50, 251, 252);
	    glVertex3fv(particles[i].position);  //see malloc allocation
	}
	glEnd();
    }


    glPopMatrix();
    glutSwapBuffers();
}

void idle(void)
{
    static int i, j;
    static int living = 0;		/* index to end of live particles */
    static float dt;
    static float last = 0;

    dt = timedelta();

    dt *= slow_down;  //to control the speed of partiicles

    /* resurrect a few particles */
    for (i = 0; i < flow*dt; i++) {
	psNewParticle(&particles[living], dt);
	living++;
	if (living >= num_particles)
	    living = 0;
    }

    for (i = 0; i < num_particles; i++) {
	psTimeStep(&particles[i], dt);

	/* collision with sphere? */
	if (draw_spheres) {
	    for (j = 0; j < draw_spheres; j++) {
		psCollideSphere(&particles[i], &spheres[j]);
	    }
	}

    }

    glutPostRedisplay();
}

void visible(int state)
{
    if (state == GLUT_VISIBLE)
	glutIdleFunc(idle);
    else
	glutIdleFunc(NULL);
}

void keyboard(unsigned char key, int x, int y)
{

    static int s = 0;

    switch (key) {

    case 't':
	if (type == PS_WATERFALL)  //if it is fountain swich to fog and vise versa
	    type = PS_FOUNTAIN;
	else if (type == PS_FOUNTAIN)
	    type = PS_WATERFALL;
	break;

    case 'P':
	point_size++;
	glPointSize(point_size);
	break;

    case 'p':
	point_size--;
	if (point_size < 1)
	    point_size = 1;
	glPointSize(point_size);
	break;

    case '+':
	flow += 100;
	if (flow > num_particles)
	    flow = num_particles;
	printf("%g particles/second\n", flow);
	break;

    case '-':
	flow -= 100;
	if (flow < 0)
	    flow = 0;
	printf("%g particles/second\n", flow);
	break;

    }
}

void menu(int item)
{
    keyboard((unsigned char)item, 0, 0);
}

int old_x, old_y;

void mouse(int button, int state, int x, int y)
{
    old_x = x;
    old_y = y;

    glutPostRedisplay();
}

void motion(int x, int y)
{
    spin_x = x - old_x;   //diable rotation in z axis
    spin_y = y - old_y;

    glutPostRedisplay();   //redisplaying the current window
}

int main(int argc, char** argv)
{
    glutInitDisplayMode(GLUT_RGB|GLUT_DEPTH|GLUT_DOUBLE);
    glutInitWindowPosition(0, 0);
    glutInitWindowSize(640, 480);
    glutInit(&argc, argv);

    glutCreateWindow("our cg project");
    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    glutMotionFunc(motion);
    glutMouseFunc(mouse);
    glutKeyboardFunc(keyboard);

    glutCreateMenu(menu);
    glutAddMenuEntry("[f]   Fog on/off", 'f');
    glutAddMenuEntry("[t]   fountain type", 't');
    glutAddMenuEntry("[-]   decrease flow", '-');
    glutAddMenuEntry("[+]   increase flow", '+');
    glutAddMenuEntry("[p]   Smaller points", 'p');
    glutAddMenuEntry("[P]   Larger points", 'P');
    glutAddMenuEntry("[Esc] Quit", 27);
    glutAttachMenu(GLUT_RIGHT_BUTTON);

    particles = (PSparticle*)malloc(sizeof(PSparticle) * num_particles);

    glutVisibilityFunc(visible);
    glutMainLoop();
    return 0;
}

